{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "T0t4wnscX3Ck"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numeric_features = ['PassengerId', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\n"
      ],
      "metadata": {
        "id": "nkWT4pKcYN8c"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Replace 'your_data.csv' with the actual path to your CSV file if it's in a different directory.\n",
        "# For example, if your file is in the 'data' folder within your current working directory:\n",
        "file_path = 'data/your_data.csv'  # or '/path/to/your/data.csv'\n",
        "# or 'titanic.csv' if this is the Titanic dataset\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Replace 'your_data.csv' with the actual path to your CSV file if it's in a different directory.\n",
        "# For example, if your file is in the 'data' folder within your current working directory:\n",
        "file_path = 'data/your_data.csv'  # or '/path/to/your/data.csv'\n",
        "# or 'titanic.csv' if this is the Titanic dataset\n",
        "\n",
        "\n",
        "try:\n",
        "    df_encoded = pd.read_csv('/content/Titanic-Dataset.csv')\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: File not found at '/content/Titanic-Dataset.csv'. Please check the file path.\")\n",
        "    # Handle the error, e.g., exit the script or use a default dataset\n",
        "    # exit(1) # Example: Exit the script\n",
        "\n",
        "# Define the numeric features to be scaled\n",
        "numeric_features = ['PassengerId', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\n",
        "\n",
        "# Create a StandardScaler object\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Fit and transform the numeric features\n",
        "df_encoded[numeric_features] = scaler.fit_transform(df_encoded[numeric_features])\n",
        "    # Handle the error, e.g., exit the script or use a default dataset\n",
        "    # exit(1) # Example: Exit the script\n",
        "\n",
        "# Define the numeric features to be scaled\n",
        "numeric_features = ['PassengerId', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\n",
        "\n",
        "# Create a StandardScaler object\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Fit and transform the numeric features\n",
        "df_encoded[numeric_features] = scaler.fit_transform(df_encoded[numeric_features])"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "lpcpbXI8Yt2o"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_encoded.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7U3SoJe3Y5CM",
        "outputId": "35eb7632-7f55-4209-eebd-0c3eadbd3ea3"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   PassengerId  Survived    Pclass  \\\n",
            "0    -1.730108         0  0.827377   \n",
            "1    -1.726220         1 -1.566107   \n",
            "2    -1.722332         1  0.827377   \n",
            "3    -1.718444         1 -1.566107   \n",
            "4    -1.714556         0  0.827377   \n",
            "\n",
            "                                                Name     Sex       Age  \\\n",
            "0                            Braund, Mr. Owen Harris    male -0.530377   \n",
            "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  0.571831   \n",
            "2                             Heikkinen, Miss. Laina  female -0.254825   \n",
            "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  0.365167   \n",
            "4                           Allen, Mr. William Henry    male  0.365167   \n",
            "\n",
            "      SibSp     Parch            Ticket      Fare Cabin Embarked  \n",
            "0  0.432793 -0.473674         A/5 21171 -0.502445   NaN        S  \n",
            "1  0.432793 -0.473674          PC 17599  0.786845   C85        C  \n",
            "2 -0.474545 -0.473674  STON/O2. 3101282 -0.488854   NaN        S  \n",
            "3  0.432793 -0.473674            113803  0.420730  C123        S  \n",
            "4 -0.474545 -0.473674            373450 -0.486337   NaN        S  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "ai4osU6EZ3-3"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for col in numeric_features:\n",
        "    plt.figure(figsize=(6, 4))\n",
        "    sns.boxplot(x=df_encoded[col])\n",
        "    plt.title(f'Boxplot of {col}')\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "JoBqrIm-Z7xl",
        "outputId": "e80ff21b-d132-4e82-8284-b4baa5f274be"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "
